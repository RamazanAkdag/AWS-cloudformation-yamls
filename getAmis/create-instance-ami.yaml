AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create EC2 instances from different AMIs on first run, convert each instance to AMI on stack deletion, and restart from corresponding AMI on next stack creation.'

Parameters:
  KeyName:
    Description: 'Name of an existing EC2 KeyPair to enable SSH access to the instances'
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: 'Must be the name of an existing EC2 KeyPair.'

Mappings:
  # This mapping defines different AMI IDs for different instances (Amazon Linux, Red Hat, etc.)
  RegionMap:
    eu-west-3:
      AmazonLinuxAMI: "ami-0a3598a00eff32f66"  # Amazon Linux 2 for us-east-1
      RedHatAMI: "ami-0574a94188d1b84a1"      # Red Hat Enterprise Linux for us-east-1

Resources:

  # DynamoDB table to store AMI IDs for future use
  AMITable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "EC2InstanceAMIs"
      AttributeDefinitions:
        - AttributeName: "InstanceId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "InstanceId"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  # IAM Role for Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:CreateImage"
                  - "ec2:DescribeInstances"
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                Resource: "*"

  # Lambda function to create AMIs and save them in DynamoDB on stack deletion
  AMICreationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import time
          ec2 = boto3.client('ec2')
          dynamodb = boto3.client('dynamodb')
          AMI_TABLE = 'EC2InstanceAMIs'
          
          def lambda_handler(event, context):
              if event['RequestType'] == 'Delete':
                  # Get running EC2 instances
                  reservations = ec2.describe_instances(
                      Filters=[{'Name': 'instance-state-name', 'Values': ['running']}]
                  ).get('Reservations', [])
                  
                  instance_ids = []
                  for reservation in reservations:
                      for instance in reservation['Instances']:
                          instance_id = instance['InstanceId']
                          instance_ids.append(instance_id)
                  
                  # Create AMI for each instance and save to DynamoDB
                  for instance_id in instance_ids:
                      ami_name = f"Backup-{instance_id}-{int(time.time())}"
                      response = ec2.create_image(
                          InstanceId=instance_id,
                          Name=ami_name,
                          NoReboot=True
                      )
                      ami_id = response['ImageId']
                      # Save the AMI ID in DynamoDB
                      dynamodb.put_item(
                          TableName=AMI_TABLE,
                          Item={
                              'InstanceId': {'S': instance_id},
                              'AMIId': {'S': ami_id},
                              'CreationTime': {'N': str(int(time.time()))}
                          }
                      )
              return {
                  'statusCode': 200,
                  'body': 'AMI creation process completed successfully.'
      Runtime: python3.8
      Timeout: 300

  # Lambda function to fetch AMI ID from DynamoDB when launching instances
  FetchAMIFromDynamoDBFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          dynamodb = boto3.client('dynamodb')
          
          def lambda_handler(event, context):
              instance_id = event['InstanceId']
              response = dynamodb.get_item(
                  TableName='EC2InstanceAMIs',
                  Key={'InstanceId': {'S': instance_id}}
              )
              if 'Item' in response:
                  return {
                      'statusCode': 200,
                      'ami_id': response['Item']['AMIId']['S']
                  }
              else:
                  return {
                      'statusCode': 404,
                      'ami_id': "None"  # Return "None" if no AMI found
                  }
      Runtime: python3.8
      Timeout: 60

  # Custom resource to trigger AMI creation during stack deletion
  AMICreationCustomResource:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt AMICreationFunction.Arn

  # EC2 Instance 1 (Amazon Linux or AMI from DynamoDB)
  MyEC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: !GetAtt FetchAMICustomResource1.ami_id  # Launch from Amazon Linux if no AMI found
      Tags:
        - Key: Name
          Value: MyAmazonLinuxInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "Amazon Linux instance started."

  # EC2 Instance 2 (Red Hat or AMI from DynamoDB)
  MyEC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: !GetAtt FetchAMICustomResource2.ami_id
      Tags:
        - Key: Name
          Value: MyRedHatInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "Red Hat instance started."

  # Custom resources to fetch AMI IDs during instance creation
  FetchAMICustomResource1:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt FetchAMIFromDynamoDBFunction.Arn
      InstanceId: !Ref MyEC2Instance1  # Pass the real instance ID to fetch AMI

  FetchAMICustomResource2:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt FetchAMIFromDynamoDBFunction.Arn
      InstanceId: !Ref MyEC2Instance2  # Pass the real instance ID to fetch AMI




Outputs:
  Instance1Id:
    Description: 'The Instance ID of the created Amazon Linux instance'
    Value: !Ref MyEC2Instance1
  Instance2Id:
    Description: 'The Instance ID of the created Red Hat instance'
    Value: !Ref MyEC2Instance2


